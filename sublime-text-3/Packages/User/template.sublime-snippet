<snippet>
	<content><![CDATA[
/*
True champion wasn't born but trained
*/
#include <cmath>
#include <functional>
#include <fstream>
#include <iostream>
#include <vector>
#include <algorithm>
#include <string>
#include <set>
#include <map>
#include <list>
#include <time.h>
#include <math.h>
#include <random>
#include <deque>
#include <queue>
#include <cassert>
#include <unordered_map>
#include <unordered_set>
#include <iomanip>
#include <bitset>
#include <sstream>
#include <chrono>
#include <cstring>
using namespace std;
#define        ll long long
#define        pb push_back
#define        mp make_pair
#define        sz(v) ((int)(v).size()) 
#define        endl '\n'
#define        IO ios::sync_with_stdio(false);cin.tie(NULL);cout.tie(NULL)
#define        all(x)            (x).begin(),(x).end()
#define        rall(x)           (x).rbegin(),(x).rend()
#define        gcd(a,b)            __gcd(a,b)
#define        rep(i,a,b)        for(int i=a;i<b;i++)
#define        repd(i,a,b)        for(int i=b-1;i>=a;i--)
#define        trav(a,x)            for(auto &a:x)
#define        fs                      first
#define        se                second
#define        deb(x)               cout << #x << "->" << x << endl;
#define           exetime             cerr << "\nTime Elapsed: " << 1000 * clock() / CLOCKS_PER_SEC << "ms\n";
#define 	   INF 				 (1<<29)
typedef vector<int> vi;
typedef vector<pair<int,int>> vii;
typedef pair <int, int> pii;
typedef set <int> si;
template<typename... T>
void rd(T&... args) {
	((cin >> args), ...);
}
template<typename... T>
void wt(T&&... args) {
	((cout << args << " "), ...);
}

const int N = 1e9+5;

void solve(){
	
}

int32_t main(){
    IO;
    int t = 1;
    // cin >> t;
    while(t--){
        solve();
    }
    exetime;
    return 0;
}
]]></content>
	<!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
	<tabTrigger>boiler</tabTrigger>
	<!-- Optional: Set a scope to limit where the snippet will trigger -->
	<!-- <scope>source.python</scope> -->
</snippet>
